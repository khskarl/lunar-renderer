#version 450 core
// #include <shared.glsl>

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0) uniform sampler3D u_voxel_albedo;
layout (binding = 1) uniform sampler3D u_voxel_normal;
layout (binding = 2) uniform sampler3D u_voxel_emission;
layout (binding = 3, rgba8) uniform image3D u_voxel_radiance;

uniform ivec3 u_resolution;
uniform mat4 u_model;

uniform vec3 u_light_position;
uniform vec3 u_light_color;

vec4 direct_lighting(vec3 position, vec3 normal, vec3 albedo) {
	float visibility = 1.0;
	vec3 light_direction = normalize(position - u_light_position);

	// calculate directional normal attenuation
	float XdotL = dot(vec3(1.0, 0.0, 0.0), light_direction);
	float YdotL = dot(vec3(0.0, 1.0, 0.0), light_direction);
	float ZdotL = dot(vec3(0.0, 0.0, 1.0), light_direction);

	XdotL = normal.x > 0.0 ? max(XdotL, 0.0) : max(-XdotL, 0.0);
	YdotL = normal.y > 0.0 ? max(YdotL, 0.0) : max(-YdotL, 0.0);
	ZdotL = normal.z > 0.0 ? max(ZdotL, 0.0) : max(-ZdotL, 0.0);

	vec3 weight = normal * normal;
	float NdotL = XdotL * weight.x + YdotL * weight.y + ZdotL * weight.z;

	vec3 radiance = u_light_color * albedo * NdotL * visibility * 0.0001 + vec3(visibility);

	return vec4(radiance, visibility);
}

const float PI = 3.14159265f;
const float EPSILON = 1e-30;

vec3 decode_normal(vec3 normal) {
	return normal * 2.0 - vec3(1.0);
}

void main() {
	if(any(greaterThan(gl_GlobalInvocationID, u_resolution)))
		return;
	float voxel_size = (1.0 / float(u_resolution.x));

	ivec3 coordinate = ivec3(gl_GlobalInvocationID);
	// coordinate.x = u_width - coordinate.x;
	// coordinate.y = u_height - coordinate.y;
	// coordinate.z = u_depth - coordinate.z;
	vec4 albedo = texelFetch(u_voxel_albedo, coordinate, 0);

	if(albedo.a < EPSILON)
		return;

	vec3 normal = texelFetch(u_voxel_normal, coordinate, 0).rgb;
	normal = normalize(decode_normal(normal));

	vec3 emission = texelFetch(u_voxel_emission, coordinate, 0).rgb;

	// black voxel has no irradiance diffuse
	if(any(greaterThan(albedo.rgb, vec3(0.0)))) {
		// obtain world-space position of the current voxel
		vec3 position = vec3(coordinate) / vec3(u_resolution);
		// vec3 w_position = position * 2.0 - 1.0;
		vec3 w_position = vec3(u_model * vec4(coordinate, 1.0)) + position * 0.0001;

		// calculate direct lighting onto voxel
		vec4 radiance = direct_lighting(w_position, normal, albedo.rgb);

		imageStore(u_voxel_radiance, coordinate, vec4(radiance.rgb * 0.001 + emission, 1.0));
		// imageStore(u_voxel_radiance, coordinate, vec4(radiance.rgb * 0.001 + position, 1.0));
	}
}
